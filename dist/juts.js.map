{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"$\"","webpack:///./node_modules/js-wrapper-lib/dist/jswl.js","webpack:///external \"jquery-ui\"","webpack:///./src/common-plugins/juts-common-jquery-plugins.js","webpack:///./src/common-plugins/juts-common-jquery-ui-plugins.js","webpack:///./src/common/AlreadyInitIdsStorage.js","webpack:///./src/common-plugins/parentCloser.js","webpack:///./src/common-plugins/replaceInAttributes.js","webpack:///./src/nested-forms/fromFiledsGroupAdderFromHiddenTemplate.js","webpack:///./src/nested-forms/parentInParentContainerDublicator.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","$","window","e","default","this","isNullOrUndefined","inArray","indexOf","isEmpty","isDefined","getSquareBracketedFragmentByNumber","getSquareBracketedFragments","split","forEach","replace","checkForSubstring","hello","console","log","jquery","ui","external_$_default","a","fn","incDataAttrCounter","counterName","$element","isDataAttrEmpty","data","toString","oldValue","Number","nthParent","$p","parent","cloneWithDataAttrs","clone","off","unbindAllForChildren","getDataAttrCounter","Error","attrName","dataAttr","jswl_default","isAttrEmpty","dataAttrName","attr","$this","find","unbind","removeSmoothly","options","settings","extend","afterRemoveFinishedCallback","afterRemoveFinishedParams","stop","animate","height","width","opacity","remove","scrollMeTo","scrollTop","offset","top","removeSelect2Span","next","select2GetSpan","select2SetError","border-color","border-style","css","formFirstInput","inputSelector","classFilter","filter","outerHTML","getAttrFragment","attributeName","fragmentNumber","str","getNameFragment","scrollToMe","scrollableElementSelector","browser","mozilla","scrollParent","renewUniqueId","removeUniqueId","uniqueId","renewUniqueIdsForChildren","removeAttr","AlreadyInitIdsStorage","jutsAlreadyInitIdsStorage","_storageData","checkAndAddIfNeed","elementId","substorageName","result","push","parentCloser","parentLevel","parentContainerLevel","containerCallback","$container","each","__deleteParentByLevelForUnique","click","$controlElement","$parent","replaceInChildrenAttrsUsingTemplatesFromDataFileds","searchRegexp","newValue","attributeNames","templateDataFieldAdditionalPart","copyValuesInsteadOtherPlaceholders","checkNameFragmentIsPlaceholderCallback","substr","replaceInAttrsUsingTemplatesFromDataFileds","nameSection","templateValue","templateValueAfterReplacement","index","array","attrValue","templateFragment","initialFragment","replaceInAttrs","fromFiledsGroupAdderFromHiddenTemplate","addSelector","deleteSelector","templateContainerSelector","filedsGroupSelector","replaceGroupNumerRegexp","parentLevelForDelete","filedGroupsCounterInitValue","afterAddCallback","$addedGroup","addFieldsGroupControlElementSelector","deleteFieldsGroupControlElementSelector","$mainFiedsGroupsContainer","$filedsGroupTemplateContainer","filedsGroupContainerSelector","initAddtionalAfterNewFiledsAdding","researchIndex","self","length","initAddProcess","on","addNewFiledsGroup","initDeleteProcess","removeFiledsGroup","$groupElement","$newFiledsGroup","html","appendTo","show","parentInParentContainerDublicator","thisSelector","containerParentLevel","replaceRegexp","afterCloneCallback","attributesToReplaceFromTemplate","attrSubstr","__relativeParentInParentContainerDublicatorForUnique","controlElementSelector","$template","$clonedTemplate","hide","val","append"],"mappings":"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","file":"juts.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = $;","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.jswl=t():e.jswl=t()}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=0)}([function(e,t,n){\"use strict\";n.r(t),t.default=new function(){var e=this;this.isNullOrUndefined=function(e){return null==e},this.inArray=function(e,t){return!(-1===t.indexOf(e))},this.isEmpty=function(e){return null==e||\"\"===e||0===e},this.isDefined=function(e){return null!=e},this.getSquareBracketedFragmentByNumber=function(t,n){return e.getSquareBracketedFragments(t)[n]},this.getSquareBracketedFragments=function(e){var t=e.split(\"[\");return t.forEach(function(e,t,n){n[t]=e.replace(/\\]/g,\"\")}),t},this.checkForSubstring=function(e,t){return-1!==e.indexOf(t)},this.hello=function(){console.log(\"Hello JSWL! ;)\")}}}]).default});","module.exports = jquery-ui;","import $ from 'jquery';\nimport jswl from \"js-wrapper-lib\";\n\n/**\n * Накрутит счетчик в дата-атрибуте данного элемента,\n * или если такого атрибута нет, то\n * \n * Инициаллизирует счетчик  в \n * дата-атрибует данного элемента (подразумевается уникальный)\n * Убедитесь, что передаваемое имя уникального для данного \n * элемента (чтобы он смог поддерживать разные счетчики)/\n * Если такого атрибута нет, то он будет создан со значением 1\n * \n * @see Убедитесь, что ваш элемент выбран по id или \n * относительно id (чтобы он был единственным -- это важно \n * если вы используете)\n * \n * @param {JQuery} $element\n * @param {String} counterName   имя атрибута (будет data-counterName)\n * @returns {undefined}\n */\n$.fn.incDataAttrCounter = function(counterName) {\n\n    var $element = $(this);\n    if ($element.isDataAttrEmpty(counterName)) {\n        $element.data(counterName, (1).toString());\n    } else {\n        var oldValue = $element.data(counterName);\n        $element.data(counterName, (Number(oldValue) + 1).toString());\n    }\n}\n\n/**\n * Получает родиля указанного уровня для данного элемента\n * \n * @param {integer} n  уровень родителя (вверх по дереву DOM)\n *                     Например: уровень папы = 0, прадедушки = 2\n * @returns {type.fn.nthParent.$p}\n */\n$.fn.nthParent = function(n){\n    var $p = $(this);\n    while ( n-- >= 0 )\n    {\n      $p = $p.parent();\n    }\n    return $p;\n};\n\n/**\n * Склонирует элемент и все дата атрибуты, отвязав события\n * от самого элемента и всех его потомков\n * \n * @returns {unresolved}\n */\n$.fn.cloneWithDataAttrs = function() {   \n    var $this = $(this);\n    return $this.clone().off().unbindAllForChildren();\n}\n\n/**\n * \n * Получит значение счетчика, устанавливаемого в data-атрибут с помощью\n * @param {type} counterName\n * @returns {unresolved}\n */\n$.fn.getDataAttrCounter = function(counterName) {      \n    var $element = $(this);\n\n    if ($element.isDataAttrEmpty(counterName)) {\n        throw new Error(\"Counter is with name \", counterName,\n            \"undefined for : \", $element, \" // use $.incDataAttrCounter() at least onse \");\n    }\n\n    return $element.data(counterName);\n}\n\n/**\n * Проверит есть ли data-атрибут с указанным имененем\n * А если есть -- то не пуст ли он.\n * \n * @param {String} attrName\n * @returns {unresolved}\n */\n$.fn.isDataAttrEmpty = function(attrName) {\n\n    var dataAttr = $(this).data(attrName);\n    return (jswl.isEmpty(dataAttr));\n}\n\n\n/**\n * Проверит есть ли атрибут с указанным имененем\n * А если есть -- то не пуст ли он.\n * \n * @param {String} attrName  имя атрибута\n * @returns {unresolved}\n */\n$.fn.isAttrEmpty = function(attrName) {\n\n    var dataAttrName = $(this).attr(attrName);\n    var result = ((typeof(dataAttrName) === 'undefined')\n            || (dataAttrName === false));\n    return result;\n}\n\n/**\n * Отвяжет все обработчики событий от потомков\n * \n * @returns {type.fn.unbindAllForChildren.$this}\n */\n$.fn.unbindAllForChildren = function() {\n    var $this = $(this);\n    $this.find('*').unbind();\n    return $this;\n}\n\n/**\n * Плавно скроет, а затем удалит блок\n * ВНИМАНИЕ: работает асинхронно.\n * \n * @param {object} options настройки\n *   afterRemoveFinishedCallback: function() {} // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР для вызова после того\n *                            как элемент будет убран из DOM \n *                            (полезно тз-зп асинхронности плагина)\n *   afterRemoveFinishedParams:  {}  // НЕОБЯЗАТЕЛЬНЫЙ ПРАМЕТР параметры для колбека\n * @returns {undefined}\n */\n$.fn.removeSmoothly = function(options) {\n\n    var settings = $.extend({\n        afterRemoveFinishedCallback: function() {},\n        afterRemoveFinishedParams: {}, \n    }, options);\n\n    this.stop().animate({\n            height: \"0px\", // высоту к нулю\n            width: \"0px\", // высоту к нулю\n            opacity: 0, // прозрачность к нулю\n        }, 600, function() {\n            $(this).remove(); // удаляем из DOM (если требуется, если же нет, то \"закомментируйте\" эту строку)\n            settings.afterRemoveFinishedCallback(\n                settings.afterRemoveFinishedParams\n            ); // вызываем колбек\n        }\n    );\n};\n \n\n/**\n * Прокрутит блок (предполагается что родельский) \n * к данному элементу\n * \n * @param {JQuery} $element -- элемент который должен стать видимым\n * @returns {undefined}\n */\n$.fn.scrollMeTo = function($element) {\n    var $this = $(this);\n\n    $this.animate({\n         scrollTop: $element.offset().top\n    }, 600);\n}\n\n\n/**\n * Remove select2 span container\n * \n * @returns {type.fn.removeSelect2Span.$this}\n */\n$.fn.removeSelect2Span = function () {\n    var $this = $(this); // your select\n    var $oldSpan = $this.next('span.select2-container');\n    $oldSpan.remove();\n\n    return $this;\n}\n\n/**\n * Получит основной \"видимый\" элемент select2\n * -- по факту этого span, добавленный сразу после вашего \n * селекта..\n * \n * @returns {type.fn.removeSelect2Span.$this}\n */\n$.fn.select2GetSpan = function () {\n    var $this = $(this); // your select\n    var $select2Span = $this.next('span.select2-container');\n\n    return $select2Span;\n}\n\n/**\n * Выставит CSS для неверного значения (ошибки) в select2 \n * (монжо вызывать например напр. после валидации)\n * \n * @param {object} options   CSS свойства \n * @returns {undefined}\n */\n$.fn.select2SetError = function(options) {\n    var $this = $(this);\n    var settings = $.extend({\n        // These are the defaults.\n        \"border-color\": 'red',\n        \"border-style\": 'solid'\n    }, options);\n\n    var $select2Span = $this.select2GetSpan();\n    $select2Span.css(settings);\n}\n\n/**\n * Получит первый инпут с указаннм селектором\n * \n * Вызывайте например так (для произвольной формы):\n * $(form).formFirstInput('вашСлектро');\n * -- в этом случае поиск будет осуществляться среди вообще \n * всех веб-форм на странице.\n * \n * Реализовано на основании идеи @see http://fkn.ktu10.com/?q=node/9850\n * \n * @param {type} className\n * @returns {type.fn.fromFirstInputWithClass.$result}\n */\n$.fn.formFirstInput = function(inputSelector) {\n    var $this  = $(this);\n\n    if (jswl.isEmpty(inputSelector)) {\n       inputSelector = ''; \n    }\n\n    var classFilter = ':input' + inputSelector + ':first';  \n    var $result = $this.find('*').filter(classFilter);\n\n    return $result;\n}\n\n/**\n * Вернёт весь html код\n * данного элемента, а не только внутренний\n * \n * @returns {string}  весь HTML элемента\n */\n$.fn.outerHTML = function(){\n    var $this = $(this);\n    return $this[0].outerHTML;\n}\n\n\n/**\n * В случае если значение атрибута разделено квадратными скобками\n * (напр. для name сложной формы)\n * получит его фрагмент, например для:\n * people[123][groups][34][2]\n * -- для fragmentNumber: 3 вернёт 34\n * \n * @param {object} options Опции плагина\n * \"attributeName\": 'name', \n   \"fragmentNumber\": 0,\n * @returns string\n */\n$.fn.getAttrFragment = function(options) {\n\n    var $this = $(this);\n    var settings = $.extend({\n        \"attributeName\": 'name',\n        \"fragmentNumber\": 0\n    }, options);\n\n    var str = $this.attr(settings.attributeName);\n\n    return jswl.getSquareBracketedFragmentByNumber(str, settings.fragmentNumber);\n}\n\n/**\n * Получит значение секции атрибута name (имени) по номеру секции\n * Обёртка над $.fn.getAttrFragment для атрибута  name данного элемент\n * \n * ((jquery js get name section subsection string by number))\n * \n * @param   {int} fragmentNumber\n * @returns {string}\n */\n$.fn.getNameFragment = function(fragmentNumber) {\n    var $this = $(this);\n    return $this.getAttrFragment({\"attributeName\": 'name',\n        \"fragmentNumber\": fragmentNumber});\n}","/**\n * Плагины для JqueryUi (с опорой на функционал jqueryui)\n */\n\nimport $ from 'jquery';\nimport 'jquery-ui';\nimport jswl from \"js-wrapper-lib\";\nimport   './juts-common-jquery-plugins.js';\n\n/**\n * Прокрутит страницу к данному блоку\n * .scrollParent() -- метод из JQuery UI,\n * который позволяет опрделить ближайший\n * родительский блок, в котором есть прокрутка\n * \n * @param {string} scrollableElementSelector  строка селектора (можно пустую, \n *  n но тогда будет произведен выбор какого-то старшего родителя \n *  (в зависиости от браузера html или body)\n *    Если вместо селектора передать сторку \"&get-scroll-parent\",\n *  будет произведена попытка использовать .scrollParent() -- метод из JQuery UI,\n *  \n *  \n * @returns {undefined}\n */\n$.fn.scrollToMe = function(scrollableElementSelector) {\n    var $this = $(this); \n    var $scrollableParent = 'none';\n\n    if (jswl.isEmpty(scrollableElementSelector)) {\n        $scrollableParent = $.browser.mozilla ? $('html') : $('body');\n        // $scrollableParent = $this.scrollParent();\n    } else if (scrollableElementSelector === '&get-scroll-parent&') {\n        $scrollableParent = $this.scrollParent();\n    } else {\n\n        $scrollableParent = $(scrollableElementSelector);\n    }\n\n    $scrollableParent.scrollMeTo($this);\n}\n\n/**\n * Удалит uniqueId\n * и заново вызовет функцию uniqueId()\n * Использует функциона jqueryUI \n * \n * @param {type} n\n * @returns {type.fn.renewUniqueId.$p}\n */\n$.fn.renewUniqueId = function(){\n    var $this = $(this);\n    $this.removeUniqueId().uniqueId();\n    return $this;\n\n};\n\n/**\n * Заменит id всех потомков (рекурсивно) на уникальные (или создаст эти id,\n * если их не было)\n * \n * @returns {type.fn.renewUniqueIdsForChildren.$this}\n */\n$.fn.renewUniqueIdsForChildren = function() {\n    var $this = $(this);\n    $this.find('*').removeAttr('id').renewUniqueId();\n    return $this;\n}","\"use strict\";\n\nexport default jutsAlreadyInitIdsStorage;\nimport jswl from \"js-wrapper-lib\";\n\n/**\n * Функции (плагины), данного набора,\n *  привязывающие обработчики на элементы с уникальным id,\n *  могут дописывать в данный объект\n *  поля, в которых хранить списки \n *   id для, которых уже применён данный плагин (необходим чтобы \n *  обработчики одного и того же плагина не вешались\n *  на один и тот же элемент дважды)\n *  \n *  Можно использовать импортировав как AlreadyInitIdsStorage\n *  \n * @returns {object}\n */\n var jutsAlreadyInitIdsStorage = function(){}; \n\n/**\n *  Уже используемые\n * \n * @type Object\n */\njutsAlreadyInitIdsStorage._storageData = {};\n\n/**\n* Проверит наличие элемента в списке __alreadyInitIdsStorage\n*  и если его там не было, то добавит.\n*  Используйте эту функцию, прежде чем привязывать событие в плагинах\n* \n* @param {String} elementId        id элемента, который проверяется на актуальность инициллизации данном плагином\n* @param {String} substorageName   имя хранилища для данной плагина (подразумевается, что один плагин использует хотя бы одно уникальное имя для себя)\n* @returns {Boolean} был ли элемент отмечен как инициллизированный ранее (до вызова этой функции), если не был -- то можете вещать обработчики в вашем плагине\n*/\njutsAlreadyInitIdsStorage.checkAndAddIfNeed = function(elementId, substorageName)\n{\n   /* Инициаллизируем хранилище, на случае если его ещё не было*/\n   if (jswl.isNullOrUndefined(jutsAlreadyInitIdsStorage._storageData[substorageName])) {\n       jutsAlreadyInitIdsStorage._storageData[substorageName] = [];\n   }\n\n   var result = true;\n   if (!jswl.inArray(elementId, jutsAlreadyInitIdsStorage._storageData[substorageName])) {\n       jutsAlreadyInitIdsStorage._storageData[substorageName].push(elementId); // запоминаем значение\n       result = false;\n   } \n\n   return result;\n}\n","/**\n * Удаление/сокрытие родительских элементов\n */\nimport $ from 'jquery';\nimport AlreadyInitIdsStorage from '../common/AlreadyInitIdsStorage.js';\nimport   './juts-common-jquery-plugins.js';\n\n/**\n * Плавно скрываем и удаляем родительский элемент при клике по данному/\n * Является обёрткой для __deleteParentByLevelForUnique()\n * \n * @param {options} options  настройки:\n * \n * parentLevel:     0,          уровень родителя относительно элеента, на который вещается плагин\n parentContainerLevel:   1,   // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР уровень котейнера родителя (используются в частности для перенумерации элементов после удаления)\n containerCallback : function($container) {}    // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР колбек для вызова на контейнере \n -- элементе уровня parentContainerLevel, в который происходит дублирование, \n может быть использован, например, для перенумерации потомков, после очередного добавления\n \n * @returns {block-dublicatorL#10.$.fn@call;each|Boolean}\n */\n$.fn.parentCloser = function (options) {\n\n    var settings = $.extend({\n        parentLevel: 0,\n        parentContainerLevel: 1,\n        containerCallback: function ($container) {}\n    }, options);\n\n\n    var elementId = '';\n    $(this).uniqueId();\n    return this.each(function () {\n        elementId = $(this).attr('id');\n\n        if (!AlreadyInitIdsStorage.checkAndAddIfNeed(elementId, 'parentCloser')) {\n            $('#' + elementId).__deleteParentByLevelForUnique(settings);\n        }\n    });\n}\n\n\n\n/**\n * @see НЕ вызывать напрямую!\n * Палавно скрываем и удаляем родительский элемент при клике по данному\n * \n * @param {options} options  настройки:\n * \n * parentLevel:     0,          уровень родителя относительно элеента, на который вещается плагин\n parentContainerLevel:   1,   // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР уровень котейнера родителя (используются в частности для перенумерации элементов после удаления)\n containerCallback : function($container) {}    // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР колбек для вызова на контейнере \n -- элементе уровня parentContainerLevel, в который происходит дублирование, \n может быть использован, например, для перенумерации потомков, после очередного добавления\n * @returns {undefined}\n */\n$.fn.__deleteParentByLevelForUnique = function (options) {\n\n    var settings = $.extend({\n        parentLevel: 0,\n        parentContainerLevel: 1,\n        containerCallback: function ($container) {}\n    }, options);\n\n    var $controlElement = $(this);\n    this.click(onClick);\n\n    function onClick() {\n\n        var $controlElement = $(this);\n        var $parent = $controlElement.nthParent(settings.parentLevel);\n        var $container = $controlElement.nthParent(settings.parentContainerLevel);\n\n        $parent.removeSmoothly({\n            afterRemoveFinishedCallback: settings.containerCallback,\n            afterRemoveFinishedParams: $container\n        });\n\n        return false;\n    }\n}","/**\n * Замены в атрибутах\n */\nimport $ from 'jquery';\nimport jswl from \"js-wrapper-lib\";\n\n/**\n * Проведёт замены значений атрибутов ВСЕХ ПОТОМКОВ данного элемента,\n * на значение сформированное из значения\n * специального поля-шаблона, в котором предварительно \n * по регулярному выражению заменяется подстрока\n * \n * @param {type} options -- массив вида (значения по умолчанию):\n *      {\n searchRegexp:     /%fileds_group_number_lavel2%/g,  // Регулярное выражения для подстроки которую надо заменить\n newValue:         '888',                            // Новая подстрока\n attributeNames:   ['name', 'for'],                  // Массив атрибутов, в которых необходимо провести замену\n templateDataFieldAdditionalPart: '-template'  // -- прибавка к имени (для определения data-атрибута)\n // например если замена проходит для атрибута for, \n // то шаблон будет искаться в атрибуте data-for-template\n copyValuesInsteadOtherPlaceholders            // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР Делать ли замену плейсхолдеров, которые остались в шаблоне после подстановки вместо searchRegexp (основная)\n checkNameFragmentIsPlaceholderCallback        // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР колбек для определения того, что фрагмент атрибута является плейсхолдером \n }\n * @returns {type.fn.replaceInChildrenAttrsUsingTemplateNameDataAttr.$parent}\n */\n$.fn.replaceInChildrenAttrsUsingTemplatesFromDataFileds = function (options) {\n\n    var $parent = $(this);\n\n    var settings = $.extend({\n        searchRegexp: /%fileds_group_number_lavel2%/g,\n        newValue: '888',\n        attributeNames: ['name', 'for'],\n        templateDataFieldAdditionalPart: '-template',\n        copyValuesInsteadOtherPlaceholders: false,\n        checkNameFragmentIsPlaceholderCallback: function (substr) {\n            return false;\n        }\n\n    }, options);\n\n    $parent.find('*').each(function ()\n    {\n        var $current = $(this);\n        $current.replaceInAttrsUsingTemplatesFromDataFileds(settings);\n    })\n\n    return $parent;\n}\n\n\n\n/**\n * Проведёт замены значений атрибутов данного элемента,\n * на значения сформированные из значений\n * специальных полей-шаблонов \n * (для каждого искомого атрибута такой data-атрибут-шаблон\n * должен существовать, иначе никаких действий для данного \n * атрибута произведено не будет), в котором предварительно \n * по регулярному выражению заменяется подстрока\n * \n * @param {type} options -- массив вида (значения по умолчанию):\n *      {\n searchRegexp:     /%fileds_group_number_lavel2%/g,  // Регулярное выражения для подстроки которую надо заменить\n newValue:         '888',                            // Новая подстрока\n attributeNames:   ['name', 'for'],                  // Массив атрибутов, в которых необходимо провести замену\n templateDataFieldAdditionalPart: '-template'  // -- прибавка к имени (для определения data-атрибута)\n // например если замена проходит для атрибута for, \n // то шаблон будет искаться в атрибуте data-for-template\n copyValuesInsteadOtherPlaceholders            // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР Делать ли замену плейсхолдеров, которые остались в шаблоне после подстановки вместо searchRegexp (основная)\n checkNameFragmentIsPlaceholderCallback        // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР колбек для определения того, что фрагмент атрибута является плейсхолдером                                        \n }\n * @returns {type.fn.replaceInChildrenAttrsUsingTemplateNameDataAttr.$parent}\n */\n$.fn.replaceInAttrsUsingTemplatesFromDataFileds = function (options) {\n\n    var $this = $(this);\n\n    var settings = $.extend({\n        searchRegexp: /%fileds_group_number_lavel2%/g,\n        newValue: '888',\n        attributeNames: ['name', 'for'],\n        templateDataFieldAdditionalPart: '-template',\n        copyValuesInsteadOtherPlaceholders: false,\n        checkNameFragmentIsPlaceholderCallback: function (nameSection) {\n            return false;\n        }\n\n    }, options);\n\n    var templateValue = '';\n    var templateValueAfterReplacement = '';\n    settings.attributeNames.forEach(function (attrName, index, array) {\n        templateValue = $this.attr('data-' + attrName + settings.templateDataFieldAdditionalPart);\n        if (!jswl.isEmpty(templateValue)) {\n            templateValueAfterReplacement = templateValue.replace(\n                    settings.searchRegexp,\n                    settings.newValue\n                    );\n\n            if ((attrName === 'name') // если работаем с атрибутом name\n                    && settings.copyValuesInsteadOtherPlaceholders) {\n                var attrValue = $this.attr(attrName);\n                var templateNameFragments = jswl.getSquareBracketedFragments(templateValueAfterReplacement);\n\n                templateNameFragments.forEach(function (templateFragment, index, array) {\n\n                    if (settings.checkNameFragmentIsPlaceholderCallback(templateFragment)\n                            && !jswl.isEmpty(attrValue)) { // если это заглушка (плейсхолдер) и есть из чего копировать       \n                        var initialFragment = jswl.getSquareBracketedFragmentByNumber(attrValue, index);\n                        if (!jswl.isEmpty(initialFragment)) { // если и в исходном (заменяемом значении) этот фрагмент не пуст\n\n                            templateValueAfterReplacement = templateValueAfterReplacement.replace(\n                                    templateFragment,\n                                    initialFragment\n                                    );\n                        }\n                    }\n                });\n            }\n\n            $this.attr(\n                    attrName,\n                    templateValueAfterReplacement\n                    );\n        }\n    });\n\n    return $this;\n}\n\n/**\n * Проведёт замену подстроки по указанному регулярному выражению\n * в списке указанных атрибутов\n * \n * @param {regexp} searchRegexp    Регулярное выражения для подстроки которую надо заменить\n * @param {literal} newValue       Новая подстрока\n * @param {array} attributeNames   Массив атрибутов, в которых необходимо провести замену\n * @returns {type.fn.replaceInAttrs.$parent}\n */\n$.fn.replaceInAttrs = function (searchRegexp, newValue, attributeNames) {\n    var $this = $(this);\n\n    var oldValue = '';\n\n    attributeNames.forEach(function (attrName, index, array) {\n        oldValue = $this.attr(attrName);\n        $this.attr(attrName, oldValue.replace(searchRegexp, newValue));\n    });\n\n    return $this;\n}","import $ from 'jquery';\nimport   '../common-plugins/juts-common-jquery-plugins.js';\n\n/**\n * Плагин добавления групп полей на форму,\n * подразумевается к вызову на конкретонм элементе (контейнере всех групп)\n * по уникальному селектору\n * \n * Плагин НЕ обеспечивает непрерыной нумерации групп полей\n * в общем случае после окончани редактирования формы\n * (в случае удалений некоторых групп полей пользоватлем),\n * НО пришедшие с бэкэнда или добавленные на форму любым другим\n * способом группы полей (т.е. не спомощью данного плагина)\n * ДОЛЖНЫ БЫТЬ пронумерованы НЕПРЕРЫВНО\n * \n * @returns {type.fn.unbindAllForChildren.$this}\n */\n$.fn.fromFiledsGroupAdderFromHiddenTemplate = function (options) {\n\n\n    var $this = $(this);\n\n    var settings = $.extend({\n        addSelector: \"#add-group\",\n        deleteSelector: \".delete-group\",\n        templateContainerSelector: '#template-container',\n        filedsGroupSelector: '.template-selector',\n        replaceGroupNumerRegexp: /%fileds_group_number%/g,\n        parentLevelForDelete: 0,\n        filedGroupsCounterInitValue: 0,\n        afterAddCallback: function ($addedGroup) {}\n\n    }, options);\n\n    /*-----------------начало обязательно переопределяемого в потомках блока ------------------*/\n\n    /**\n     * По клику по нему очередная группа полей будет добавляться в форму\n     * \n     * @type String\n     */\n    var addFieldsGroupControlElementSelector = settings.addSelector;\n\n\n    /**\n     * По клику по этому элементу будет удаляться\n     * содержащий его блок c полями (группа полей)\n     * \n     * @type String\n     */\n    var deleteFieldsGroupControlElementSelector = settings.deleteSelector;\n\n    /**\n     * В этот элемент мы будет добавляеть группы полей,\n     * а также удалять их их него если потребуется\n     * \n     * @type window.$|jQuery|$|_$|@pro;window@pro;$|Window.$\n     */\n    var $mainFiedsGroupsContainer = $this;\n\n    /**\n     * Используется для извлечения создержимого --\n     * подразумевается, что это скрытый блок-шаблон\n     * для группы полей, где в дальнейшем будет\n     * произведена замена имени\n     * \n     * @type window.$|jQuery|$|_$|@pro;window@pro;$|Window.$\n     */\n    var $filedsGroupTemplateContainer = $(settings.templateContainerSelector);\n\n    /*\n     * Селектор элемента, в который завернуты поля одной группы (по-идее класс)\n     * -- исходный скрытый элемент, по-идее id\n     * \n     * @type String\n     */\n    var filedsGroupContainerSelector = settings.filedsGroupSelector;\n\n\n\n    /**\n     * Регулярное выражение, подстроку извлечённую из него\n     * будем заменять на текущее значение researchIndex\n     * \n     *  Например, если в вашем случае пэйсхолдером (обычно его размещаю в имени элементов input)\n     *  является подстрока %element-index%, например:\n     *  <input placeholder=\"возраст\" name=\"person-list[%element-index%][age]\" type=\"text\">\n     *   то надо в качестве значения данного свойства\n     *   нужно указать указать /%element-index%/g\n     * \n     * @type RegExp\n     */\n    var replaceGroupNumerRegexp = settings.replaceGroupNumerRegexp;\n\n\n    /**\n     * Производим дополнительные действия после \n     * добавления группы полей, например,\n     * привязываем к некторорым полям группы специфические обработчики и т.д.\n     * \n     * @returns {undefined}\n     */\n    this.initAddtionalAfterNewFiledsAdding = settings.afterAddCallback;\n\n    /*-----------------конец обязательно переопределяемого в потомках блока ------------------*/\n\n\n    /**\n     * Фактически число -- при инициаллизации класса в него \n     * попадёт число уже имеющихся групп полей.\n     * Используется в качестве индекса при добавлении новых групп/\n     * \n     * Подразумевается, что добавленные на страницу статически (с бэкэнда)\n     * блоки должны нумероваться с нуля\n     * \n     * @type jQuery.prototype.pushStack.ret.length|jQuery.length\n     */\n    var researchIndex = settings.filedGroupsCounterInitValue;\n\n    /**\n     * Для вызова методов класса из других методов, вызванных в обработчиках\n     */\n    var self = this; // ВАЖНО: назначим псевдоним\n\n\n\n\n    /* тут надо написать нормальноую инициаллизацию извне */\n\n    researchIndex = researchIndex + $mainFiedsGroupsContainer.find(filedsGroupContainerSelector).length; // определяем исходное (пришедшее с бэкэнда) число групп полей\n\n    /**\n     * Добавление группы полей (прикручиваем обработчики)\n     * \n     * @returns {undefined}\n     */\n    this.initAddProcess = function () {\n\n        $(addFieldsGroupControlElementSelector).off(\"click\"); // вырубаем иные обработчики\n        $(addFieldsGroupControlElementSelector).on(\"click\", function (e) { // добавляем блок с полями\n            self.addNewFiledsGroup();\n            self.initDeleteProcess();\n            self.initAddtionalAfterNewFiledsAdding();\n\n            return false;\n        });\n    }\n\n    /**\n     * Удаление группы полей (прикручиваем обработчики)\n     * \n     * @returns {undefined}\n     */\n    this.initDeleteProcess = function () {\n\n        /* Удаление группы полей */\n        $(deleteFieldsGroupControlElementSelector).on(\"click\", function () { // удаляем элемент\n            var $element = $(this).nthParent(settings.parentLevelForDelete); // получаем родителя\n\n            self.removeFiledsGroup($element);\n            return false;\n        });\n    }\n\n\n\n    /**\n     * Добавит новую группу полей в основной контейнер\n     * \n     * @param {type} $groupElement\n     * @returns {undefined}\n     */\n    this.removeFiledsGroup = function ($groupElement) {\n        $groupElement.stop().animate({// анимация средствами JQuery\n            height: \"0px\", // высоту к нулю\n            width: \"0px\", // высоту к нулю\n            opacity: 0, // прозрачность к нулю\n        }, 600, function () {\n            $(this).remove();\n        }\n        );\n\n    }\n\n    /**\n     * Добавит новую группу полей в основной контейнер\n     * @returns {Boolean}\n     */\n    this.addNewFiledsGroup = function () {\n\n        var $newFiledsGroup = $($filedsGroupTemplateContainer.html()\n                .replace(replaceGroupNumerRegexp, researchIndex));\n        $newFiledsGroup.find('*').removeAttr('id'); // все потомки должны быть неуникальными\n\n        $newFiledsGroup.appendTo($mainFiedsGroupsContainer).show('slow');\n\n        researchIndex++;\n\n        return false;\n    }\n\n\n    self.initAddProcess();\n    self.initDeleteProcess();\n\n}","import $ from 'jquery';\nimport AlreadyInitIdsStorage from '../common/AlreadyInitIdsStorage.js';\nimport jswl from \"js-wrapper-lib\";\n\n/**\n * По клику на элемент Дублирует родительский блок указаного уровня, \n * в родительский контейнер указаного уровня\n * (в реализации использованы относительные селекторы).\n * Таким образом сам управляющий элемент тоже окажется продублированным.\n * \n * По факту является обёрткой для $('').__relativeParentInParentContainerDublicatorForUnique(), которая проверяет, \n * которая добавляет все выбранным элементам уникальный id (если такового нет),\n * а затем уже каждому из них по уникальному селектору назначает обработчик,\n * который будет отсчитывать родителей от конкретного уникального элемента.\n * \n * \n * {\n \"thisSelector\": '',            селектор элемента на который вещается плагин (управляющего, того,\n по которому пользователь будет длеать клик при дублировании блока)\n \"containerParentLevel\": 1,      уровень родительского контейнера \n (в который добавляем)\n \"parentLevel\": 0,               уровень родителя (папа = 0) (копию \n которого добавляем в родительский блок с уровнем containerParentLevel)   \n \"replaceRegexp\": /%plholder%/g, регулярное выражение для замены \n в аттрибутах подстроки на порядокый номер данного элемента в родителе\n \"afterCloneCallback\": function($addedGroup) {}    НЕ ОБЯЗАТЕЛЕН: эта функция будет \n вызвна для копируемого шаблона (вы можете провести дополнительные инициллизации)\n attributesToReplaceFromTemplate:   ['name', 'for', 'class'], // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР Массив атрибутов \n каждого клонированного элемента (внутри склонированного блока),\n в которых необходимо провести замену из шаблона, определяемого templateDataFieldAdditionalPart\n templateDataFieldAdditionalPart: '-template' // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР прибавка к имени (для определения data-атрибута)\n например если замена проходит для атрибута for, \n то шаблон будет искаться в атрибуте data-for-template\n \n copyValuesInsteadOtherPlaceholders      // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР Делать ли замену плейсхолдеров, которые остались в шаблоне значения атрибута после подстановки вместо replaceRegexp (основная)\n checkNameFragmentIsPlaceholderCallback:: function(attrSubstr) {   // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР колбек для определения того, что фрагмент атрибута является плейсхолдером \n        return jswl.checkForSubstring(attrSubstr, '%');\n    },\n containerCallback : function($container) {}    // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР колбек для вызова на контейнере \n -- элементе уровня containerParentLevel, в который происходит дублирование, \n может быть использован, например, для перенумерации потомков, после очередного добавления\n }\n * @param {object}   options          настройки.\n * @returns {window.$|jQuery|$|_$|@pro;window@pro;$|Window.$}\n */\n$.fn.parentInParentContainerDublicator = function (options) {\n\n    var $this = $(this);\n    var settings = $.extend({\n        \"thisSelector\": '',\n        \"containerParentLevel\": 1,\n        \"parentLevel\": 0,\n        \"replaceRegexp\": /%fields_group_number_2%/g,\n        afterCloneCallback: function ($addedGroup) {},\n        attributesToReplaceFromTemplate: ['name', 'for', 'class'],\n        templateDataFieldAdditionalPart: '-template',\n        copyValuesInsteadOtherPlaceholders: false,\n        checkNameFragmentIsPlaceholderCallback: function (attrSubstr) {\n            return jswl.checkForSubstring(attrSubstr, '%');\n        },\n        containerCallback: function ($container) {}\n    }, options);\n\n\n\n    $(this).uniqueId();\n    var elementId = '';\n    return this.each(function () {\n        elementId = $(this).attr('id');\n\n        if (!AlreadyInitIdsStorage.checkAndAddIfNeed(elementId,\n                'parentInParentContainerDublicator')) {\n\n            $('#' + elementId).__relativeParentInParentContainerDublicatorForUnique(\n                    settings);\n        }\n    });\n}\n\n/**\n* @see НЕ вызывать напрямую!\n* \n* По клику на элемент Дублирует родительский блок указаного уровня, \n* в родительский контейнер указаного уровня\n* (в реализации использованы относительные селекторы)\n* \n* {\n   \"thisSelector\": '',            селектор элемента на который вещается плагин (управляющего, того,\n                                      по которому пользователь будет длеать клик при дублировании блока)\n   \"containerParentLevel\": 1,      уровень родительского контейнера \n                                           (в который добавляем)\n   \"parentLevel\": 0,               уровень родителя (папа = 0) (копию \n                                           которого добавляем в родительский блок с уровнем containerParentLevel)   \n   \"replaceRegexp\": /%plholder%/g, регулярное выражение для замены \n                                      в аттрибутах подстроки на порядокый номер данного элемента в родителе\n   \"afterCloneCallback\": function($addedGroup) {}  // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР эта функция будет \n                                         вызвна для копируемого шаблона (вы можете провести дополнительные инициллизации)\n   attributesToReplaceFromTemplate:   ['name', 'for', 'class'], // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР Массив атрибутов \n                                      каждого клонированного элемента (внутри склонированного блока),\n                                      в которых необходимо провести замену из шаблона, определяемого templateDataFieldAdditionalPart\n   templateDataFieldAdditionalPart: '-template' // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР прибавка к имени (для определения data-атрибута)\n                                       например если замена проходит для атрибута for, \n                                           то шаблон будет искаться в атрибуте data-for-template\n\n   copyValuesInsteadOtherPlaceholders      // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР Делать ли замену плейсхолдеров, которые остались в шаблоне значения атрибута после подстановки вместо replaceRegexp (основная)\n   checkNameFragmentIsPlaceholderCallback  // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР колбек для определения того, что фрагмент атрибута является плейсхолдером \n   containerCallback : function($container) {}    // НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР колбек для вызова на контейнере \n                -- элементе уровня containerParentLevel, в который происходит дублирование, \n               может быть использован, например, для перенумерации потомков, после очередного добавления\n   }\n* @param {object}   options          настройки.\n* @returns {window.$|jQuery|$|_$|@pro;window@pro;$|Window.$}\n*/\n$.fn.__relativeParentInParentContainerDublicatorForUnique = function(options) {\n\n    var $this = $(this);\n    var settings = $.extend({\n       \"thisSelector\": '', \n       \"containerParentLevel\": 1,   \n       \"parentLevel\": 0, \n       \"replaceRegexp\": /%fields_group_number_2%/g,\n       afterCloneCallback: function($addedGroup) {},\n       attributesToReplaceFromTemplate:  ['name', 'for', 'class'],\n       templateDataFieldAdditionalPart: '-template',\n       copyValuesInsteadOtherPlaceholders: false, \n       checkNameFragmentIsPlaceholderCallback: function(substr) {\n           return false;\n       },\n       containerCallback: function($container) {} \n           }, options);\n\n    var controlElementSelector = settings.thisSelector; \n\n//        console.log('copy other:', settings.copyValuesInsteadOtherPlaceholders);\n//        console.log('bind on:', $this);\n\n    var $controlElement = $(this);\n    var $container = $controlElement.nthParent(settings.containerParentLevel);\n    var $template =  $controlElement.nthParent(settings.parentLevel);\n\n    $container.incDataAttrCounter(settings.thisSelector); // фактически докрутит счетчик до нужного значения, по числу элементов в контейнере ещё до лкика на добавление очередного \n\n    this.click(onClick);\n\n    function onClick(){ \n\n       var $clonedTemplate = $template.cloneWithDataAttrs();\n\n       $clonedTemplate.hide();\n       $clonedTemplate.find('*').removeAttr('id'); // удаляем id всех элементах скопированного шаблона, чтобы блок был \"нейтральным\"\n\n\n       $clonedTemplate.replaceInChildrenAttrsUsingTemplatesFromDataFileds({\n           searchRegexp:     settings.replaceRegexp,\n           newValue:         $container.getDataAttrCounter(settings.thisSelector),\n           attributeNames:   settings.attributesToReplaceFromTemplate,\n           templateDataFieldAdditionalPart: settings.templateDataFieldAdditionalPart,\n           copyValuesInsteadOtherPlaceholders: settings.copyValuesInsteadOtherPlaceholders, \n           checkNameFragmentIsPlaceholderCallback: \n                   settings.checkNameFragmentIsPlaceholderCallback\n           }\n       );\n\n       $clonedTemplate.find('input').val('');\n\n       $container.append($clonedTemplate);\n       settings.afterCloneCallback($clonedTemplate); // выполняем необходимые действия типа привязки событий\n       settings.containerCallback($container); // перенумеровываем элементы\n       $clonedTemplate.show('slow');\n\n\n       var $newContorlElement = $clonedTemplate.find(controlElementSelector);\n\n       $newContorlElement.parentInParentContainerDublicator(settings);\n\n       return false;\n   }\n}\n"],"sourceRoot":""}